package com.mmtap.trader.bridjapi;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.TimeT;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:861</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("MT4ManagerAPI") 
public class TickRecord extends StructObject {
	static {
		BridJ.register();
	}
	/** tick time */
	@Field(0) 
	public TimeT ctm() {
		return this.io.getTimeTField(this, 0);
	}
	/** tick time */
	@Field(0) 
	public TickRecord ctm(TimeT ctm) {
		this.io.setTimeTField(this, 0, ctm);
		return this;
	}
	/** bid, ask */
	@Field(1) 
	public double bid() {
		return this.io.getDoubleField(this, 1);
	}
	/** bid, ask */
	@Field(1) 
	public TickRecord bid(double bid) {
		this.io.setDoubleField(this, 1, bid);
		return this;
	}
	/** bid, ask */
	@Field(2) 
	public double ask() {
		return this.io.getDoubleField(this, 2);
	}
	/** bid, ask */
	@Field(2) 
	public TickRecord ask(double ask) {
		this.io.setDoubleField(this, 2, ask);
		return this;
	}
	/** index if datafeed */
	@Field(3) 
	public int datafeed() {
		return this.io.getIntField(this, 3);
	}
	/** index if datafeed */
	@Field(3) 
	public TickRecord datafeed(int datafeed) {
		this.io.setIntField(this, 3, datafeed);
		return this;
	}
	/** TICK_FLAG_* flags */
	@Field(4) 
	public byte flags() {
		return this.io.getByteField(this, 4);
	}
	/** TICK_FLAG_* flags */
	@Field(4) 
	public TickRecord flags(byte flags) {
		this.io.setByteField(this, 4, flags);
		return this;
	}
	public TickRecord() {
		super();
	}
	public TickRecord(Pointer pointer) {
		super(pointer);
	}
}
