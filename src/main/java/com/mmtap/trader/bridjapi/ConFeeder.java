package com.mmtap.trader.bridjapi;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:221</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("MT4ManagerAPI") 
public class ConFeeder extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * name<br>
	 * C type : char[64]
	 */
	@Array({64}) 
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * datafeed filename<br>
	 * C type : char[256]
	 */
	@Array({256}) 
	@Field(1) 
	public Pointer<Byte > file() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * server address<br>
	 * C type : char[64]
	 */
	@Array({64}) 
	@Field(2) 
	public Pointer<Byte > server() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * datafeed login<br>
	 * C type : char[32]
	 */
	@Array({32}) 
	@Field(3) 
	public Pointer<Byte > login() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * datafeed password<br>
	 * C type : char[32]
	 */
	@Array({32}) 
	@Field(4) 
	public Pointer<Byte > pass() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * keywords (news filtration)<br>
	 * C type : char[256]
	 */
	@Array({256}) 
	@Field(5) 
	public Pointer<Byte > keywords() {
		return this.io.getPointerField(this, 5);
	}
	/** enable feeder */
	@Field(6) 
	public int enable() {
		return this.io.getIntField(this, 6);
	}
	/** enable feeder */
	@Field(6) 
	public ConFeeder enable(int enable) {
		this.io.setIntField(this, 6, enable);
		return this;
	}
	/** datafeed mode-enumeration FEED_QUOTES, FEED_NEWS, FEED_QUOTESNEWS */
	@Field(7) 
	public int mode() {
		return this.io.getIntField(this, 7);
	}
	/** datafeed mode-enumeration FEED_QUOTES, FEED_NEWS, FEED_QUOTESNEWS */
	@Field(7) 
	public ConFeeder mode(int mode) {
		this.io.setIntField(this, 7, mode);
		return this;
	}
	/** max. freeze time (default ~120 sec.) */
	@Field(8) 
	public int timeout() {
		return this.io.getIntField(this, 8);
	}
	/** max. freeze time (default ~120 sec.) */
	@Field(8) 
	public ConFeeder timeout(int timeout) {
		this.io.setIntField(this, 8, timeout);
		return this;
	}
	/** reconnect timeout before attemps_sleep connect attempts (default ~ 5  sec) */
	@Field(9) 
	public int timeout_reconnect() {
		return this.io.getIntField(this, 9);
	}
	/** reconnect timeout before attemps_sleep connect attempts (default ~ 5  sec) */
	@Field(9) 
	public ConFeeder timeout_reconnect(int timeout_reconnect) {
		this.io.setIntField(this, 9, timeout_reconnect);
		return this;
	}
	/** reconnect timeout after attemps_sleep connect attempts  (default ~ 60 sec) */
	@Field(10) 
	public int timeout_sleep() {
		return this.io.getIntField(this, 10);
	}
	/** reconnect timeout after attemps_sleep connect attempts  (default ~ 60 sec) */
	@Field(10) 
	public ConFeeder timeout_sleep(int timeout_sleep) {
		this.io.setIntField(this, 10, timeout_sleep);
		return this;
	}
	/** reconnect count (see timeout_reconnect & timeout_sleep) */
	@Field(11) 
	public int attemps_sleep() {
		return this.io.getIntField(this, 11);
	}
	/** reconnect count (see timeout_reconnect & timeout_sleep) */
	@Field(11) 
	public ConFeeder attemps_sleep(int attemps_sleep) {
		this.io.setIntField(this, 11, attemps_sleep);
		return this;
	}
	/** news language id */
	@Field(12) 
	public int news_langid() {
		return this.io.getIntField(this, 12);
	}
	/** news language id */
	@Field(12) 
	public ConFeeder news_langid(int news_langid) {
		this.io.setIntField(this, 12, news_langid);
		return this;
	}
	/**
	 * reserved<br>
	 * C type : int[33]
	 */
	@Array({33}) 
	@Field(13) 
	public Pointer<Integer > unused() {
		return this.io.getPointerField(this, 13);
	}
	public ConFeeder() {
		super();
	}
	public ConFeeder(Pointer pointer) {
		super(pointer);
	}
}
