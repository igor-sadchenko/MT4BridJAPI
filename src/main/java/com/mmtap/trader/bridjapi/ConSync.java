package com.mmtap.trader.bridjapi;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.TimeT;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * +------------------------------------------------------------------+<br>
 * <i>native declaration : MT4ManagerAPI.h:610</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("MT4ManagerAPI") 
public class ConSync extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * name (address<br>
	 * C type : char[64]
	 */
	@Array({64}) 
	@Field(0) 
	public Pointer<Byte > server() {
		return this.io.getPointerField(this, 0);
	}
	/** port */
	@Field(1) 
	public int unusedport() {
		return this.io.getIntField(this, 1);
	}
	/** port */
	@Field(1) 
	public ConSync unusedport(int unusedport) {
		this.io.setIntField(this, 1, unusedport);
		return this;
	}
	/**
	 * for future use-login<br>
	 * C type : char[32]
	 */
	@Array({32}) 
	@Field(2) 
	public Pointer<Byte > login() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * for future use=password<br>
	 * C type : char[32]
	 */
	@Array({32}) 
	@Field(3) 
	public Pointer<Byte > password() {
		return this.io.getPointerField(this, 3);
	}
	/** enable sychronization */
	@Field(4) 
	public int enable() {
		return this.io.getIntField(this, 4);
	}
	/** enable sychronization */
	@Field(4) 
	public ConSync enable(int enable) {
		this.io.setIntField(this, 4, enable);
		return this;
	}
	/** synchronization mode: HB_ADD,HB_UPDATE,HB_INSERT */
	@Field(5) 
	public int mode() {
		return this.io.getIntField(this, 5);
	}
	/** synchronization mode: HB_ADD,HB_UPDATE,HB_INSERT */
	@Field(5) 
	public ConSync mode(int mode) {
		this.io.setIntField(this, 5, mode);
		return this;
	}
	/** synchronization range (<0-whole chart) */
	@Field(6) 
	public TimeT from() {
		return this.io.getTimeTField(this, 6);
	}
	/** synchronization range (<0-whole chart) */
	@Field(6) 
	public ConSync from(TimeT from) {
		this.io.setTimeTField(this, 6, from);
		return this;
	}
	/** synchronization range (<0-whole chart) */
	@Field(7) 
	public TimeT to() {
		return this.io.getTimeTField(this, 7);
	}
	/** synchronization range (<0-whole chart) */
	@Field(7) 
	public ConSync to(TimeT to) {
		this.io.setTimeTField(this, 7, to);
		return this;
	}
	/**
	 * symbols list<br>
	 * C type : char[1024]
	 */
	@Array({1024}) 
	@Field(8) 
	public Pointer<Byte > securities() {
		return this.io.getPointerField(this, 8);
	}
	/** time correction in minutes */
	@Field(9) 
	public int timecorrection() {
		return this.io.getIntField(this, 9);
	}
	/** time correction in minutes */
	@Field(9) 
	public ConSync timecorrection(int timecorrection) {
		this.io.setIntField(this, 9, timecorrection);
		return this;
	}
	/**
	 * reserved<br>
	 * C type : int[13]
	 */
	@Array({13}) 
	@Field(10) 
	public Pointer<Integer > reserved() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * internal (do not use)<br>
	 * C type : ConSync*
	 */
	@Field(11) 
	public Pointer<ConSync > next() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * internal (do not use)<br>
	 * C type : ConSync*
	 */
	@Field(11) 
	public ConSync next(Pointer<ConSync > next) {
		this.io.setPointerField(this, 11, next);
		return this;
	}
	public ConSync() {
		super();
	}
	public ConSync(Pointer pointer) {
		super(pointer);
	}
}
